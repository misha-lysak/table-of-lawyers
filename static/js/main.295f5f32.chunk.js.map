{"version":3,"sources":["components/Thead/Thead.jsx","components/Tbody/Tbody.jsx","components/Table/Table.jsx","App.js","index.js"],"names":["Thead","titles","map","title","Date","Tbody","rows","row","index","useState","id","setId","fullName","setFullName","phone","setPhone","email","setEmail","age","setAge","experience","setExperience","yearlyInome","setYearlyInome","hasChildren","setHasChildren","licenseStates","setLicenseStates","expirationDate","setExpirationDate","licenseNumber","setLicenseNumber","duplicateWith","setDuplicateWith","useEffect","Phone","Email","Age","Experience","isAdult","useCallback","isLawyesHaveCorrectExperience","yearsOfExperience","yearsOfAge","isCorrectYearlyIncome","counts","Number","toFixed","findAbr","string","length","splitedBySeparator","split","stringToArray","Array","of","includes","toString","sort","curr","next","correctPhoneNumber","number","slice","isCorrectDate","date","newDate","firstIsValid","moment","isValid","secondIsValid","now","isChildBoolean","bool","isCorrectLicenceNumber","currIndex","indexOf","i","uniqueKey","className","Table","App","setTitles","setRows","titlesForValidation","toLowerCase","type","accept","onChange","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","headers","list","newObj","j","td","substring","Object","values","filter","x","push","processData","sheet_to_csv","header","readAsBinaryString","htmlFor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.295f5f32.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Thead = ({ titles }) => {\n\n  return (\n    <thead>\n      <tr>\n        <th>id</th>\n        {titles.map(title => (\n          <th key={new Date(1000) + title}>{title}</th>\n        ))}\n        <th>Duplicate With</th>\n      </tr>\n    </thead>\n  )\n}\n\nThead.propTypes = {\n  titles: PropTypes.array.isRequired,\n}","import React, { useCallback, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport uniqueKey from 'unique-key'\nimport moment from 'moment';\n\nexport const Tbody = ({ rows, row, index }) => {\n  const [id, setId] = useState()\n  const [fullName, setFullName] = useState([]);\n  const [phone, setPhone] = useState([]);\n  const [email, setEmail] = useState([]);\n  const [age, setAge] = useState([]);\n  const [experience, setExperience] = useState([]);\n  const [yearlyInome, setYearlyInome] = useState([]);\n  const [hasChildren, setHasChildren] = useState([]);\n  const [licenseStates, setLicenseStates] = useState([]);\n  const [expirationDate, setExpirationDate] = useState([]);\n  const [licenseNumber, setLicenseNumber] = useState([]);\n  const [duplicateWith, setDuplicateWith] = useState('');\n\n  useEffect(() => {\n    setId(index + 1);\n    setFullName(row['Full Name']);\n    setPhone(row.Phone);\n    setEmail(row.Email);\n    setAge(row.Age);\n    setExperience(row.Experience);\n    setYearlyInome(row['Yearly Income']);\n    setHasChildren(row['Has children']);\n    setLicenseStates(row['License states']);\n    setExpirationDate(row['Expiration date']);\n    setLicenseNumber(row['License number']);\n  }, [row])\n\n  const isAdult = useCallback(\n    (age) => {\n      return age < 21 && age > 0\n    }, [rows]\n  )\n\n  const isLawyesHaveCorrectExperience = useCallback(\n    (yearsOfExperience, yearsOfAge) => {\n      if (yearsOfExperience > yearsOfAge || yearsOfExperience <= 0) {\n        return true\n      }\n\n      return false\n    }, [],\n  )\n\n  const isCorrectYearlyIncome = useCallback(\n    (counts) => {\n      return counts !== Number(counts).toFixed(2) || 0 <= counts >= 1000000\n    }, [],\n  )\n\n  const findAbr = useCallback(\n    (string) => {\n      if (string.length > 0) {\n        \n        let splitedBySeparator = string.split('|');\n        let stringToArray = Array.of(string);\n    \n        if (splitedBySeparator.includes(stringToArray.toString())) {\n          return string\n        }\n\n        const sortedByLength = [...splitedBySeparator].sort((curr, next) => (\n          curr.length - next.length\n          )\n        )\n\n        return sortedByLength[0]\n      } else {\n        return ''\n      }\n    }, [],\n  )\n\n  const correctPhoneNumber = useCallback(\n    (number) => {\n      return `+1${number.slice(-10)}`\n    }\n  )\n\n  const isCorrectDate = useCallback(\n    (date) => {\n      // moment('Decimal128', 'YYYY-MM-DD').isValid();\n      // const date = expirationDate;\n      // const toDateFormat = moment(new Date(date)).format(dateFormat);\n      const newDate = new Date(date)\n      const firstDateFormat = 'MM/DD/YYYY';\n      const secondDateFormat = 'YYYY-MM-DD';\n      const firstIsValid = moment(date, firstDateFormat, true).isValid();\n      const secondIsValid = moment(date, secondDateFormat, true).isValid();\n\n      if ((firstIsValid && newDate > Date.now()) || (secondIsValid && newDate > Date.now())) {\n        return false\n      }\n\n      return true\n    }, [row],\n  )\n\n  const isChildBoolean = useCallback(\n    (bool) => {\n      if (bool === 'true' || bool === 'false' || bool === '') {\n        return false;\n      }\n\n      return true\n    }, []\n  )\n\n  const isCorrectLicenceNumber = useCallback(\n    (number) => {\n      return number.length !== 6\n    }, []\n  )\n\n  useEffect(() => {\n    let currIndex = rows.indexOf(row)\n    for (let i = 0; i < rows.length; i++) {\n      if ((rows[i].Email === email && i !== currIndex) || rows[i].Phone === phone && i !== currIndex) {\n        setDuplicateWith(i + 1)\n        break;\n      }\n\n      setDuplicateWith('')\n    }\n  }, [email, phone])\n\n  return (\n    <tr key={uniqueKey(1)}>\n      <td key={uniqueKey(2)}>{id}</td>\n      <td key={uniqueKey(3)}>{fullName}</td>\n      <td key={uniqueKey(4)}>{correctPhoneNumber(phone)}</td>\n      <td key={uniqueKey(5)}>{email}</td>\n      <td className={isAdult(age) ? \"incorrect-data\" : ''} key={uniqueKey(6)}>{age}</td>\n      <td className={isLawyesHaveCorrectExperience(experience, age) ? \"incorrect-data\" : ''} key={uniqueKey(7)}>{experience}</td>\n      <td className={isCorrectYearlyIncome(yearlyInome) ? \"incorrect-data\" : ''} key={uniqueKey(8)}>{yearlyInome}</td>\n      <td className={isChildBoolean(hasChildren) ? \"incorrect-data\" : ''} key={uniqueKey(9)}>{hasChildren === '' ? 'false' : hasChildren}</td>\n      <td key={uniqueKey('04')}>{findAbr(licenseStates)}</td>\n      <td className={isCorrectDate(expirationDate) ? \"incorrect-data\" : ''} key={uniqueKey('02')}>{expirationDate}</td>\n      <td className={isCorrectLicenceNumber(licenseNumber) ? \"incorrect-data\" : ''} key={uniqueKey('03')}>{licenseNumber}</td>\n      <td key={uniqueKey('05')}>{duplicateWith}</td>\n    </tr>\n  )\n}\n\nTbody.propTypes = {\n  rows: PropTypes.arrayOf(\n    PropTypes.shape({\n      'Full Name': PropTypes.string,\n      Phone: PropTypes.string,\n      Email: PropTypes.string,\n      Age: PropTypes.string,\n      Experience: PropTypes.string,\n      'Yearly Income': PropTypes.string,\n      'Has children': PropTypes.string,\n      'License states': PropTypes.string,\n      'Expiration date': PropTypes.string,\n      'License number': PropTypes.string,\n    })\n  ),\n  row: PropTypes.shape({\n    'Full Name': PropTypes.string,\n    Phone: PropTypes.string,\n    Email: PropTypes.string,\n    Age: PropTypes.string,\n    Experience: PropTypes.string,\n    'Yearly Income': PropTypes.string,\n    'Has children': PropTypes.string,\n    'License states': PropTypes.string,\n    'Expiration date': PropTypes.string,\n    'License number': PropTypes.string,\n  }),\n  index: PropTypes.number.isRequired,\n}","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { Thead } from '../Thead/Thead';\nimport { Tbody } from '../Tbody/Tbody';\n\nexport const Table = ({ rows, titles }) => {\n\n  return (\n    <table>\n      <Thead titles={titles} />\n      <tbody>\n        {rows.map((row, index) => (\n          <Tbody key={new Date(5000) + index} rows={rows} row={row} index={index} />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\n\nTable.propTypes = {\n  rows: PropTypes.arrayOf(\n    PropTypes.shape({\n    'Full Name': PropTypes.string,\n    Phone: PropTypes.string,\n    Email: PropTypes.string,\n    Age: PropTypes.string,\n    Experience: PropTypes.string,\n    'Yearly Income': PropTypes.string,\n    'Has children': PropTypes.string,\n    'License states': PropTypes.string,\n    'Expiration date': PropTypes.string,\n    'License number': PropTypes.string,\n    }),\n  ).isRequired,\n  titles: PropTypes.array,\n}\n  // const [fullName, setFullName] = useState([]);\n  // const [phone, setPhone] = useState([]);\n  // const [email, setEmail] = useState([]);\n  // const [age, setAge] = useState([]);\n  // const [expirience, setExpirience] = useState([]);\n  // const [yearlyInome, setYearlyInome] = useState([]);\n  // const [licenseStates, setLicenseStates] = useState([]);\n  // const [expirationDate, setExpirationDate] = useState([]);\n  // const [licenseNumber, setLicenseNumber] = useState([]);\n    // useEffect(() => {\n    //   rows.map(row => (\n    //     setFullName(row['Full Name'])\n    //   ))\n    // })","import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { Table } from './components/Table'\nimport './App.scss';\n\nfunction App() {\n  const [titles, setTitles] = useState([]);\n  const [rows, setRows] = useState([]);\n  const titlesForValidation = titles.map(title => title.toLowerCase());\n\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n \n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n      if (headers && row.length == headers.length) {\n        const newObj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let td = row[j];\n          if (td.length > 0) {\n            if (td[0] == '\"')\n              td = td.substring(1, td.length - 1);\n            if (td[td.length - 1] == '\"')\n              td = td.substring(td.length - 2, 1);\n          }\n          if (headers[j]) {\n            newObj[headers[j]] = td;\n          }\n        }\n \n        if (Object.values(newObj).filter(x => x).length > 0) {\n          list.push(newObj);\n        }\n      }\n    }\n \n    setRows(list);\n    setTitles(headers);\n  }\n \n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n\n    reader.readAsBinaryString(file);\n  }\n\n  return (\n    <>\n    <input\n        className=\"file-input\"\n        id=\"file\"\n        type=\"file\"\n        accept=\".csv\"\n        onChange={handleFileUpload}\n      />\n      <label htmlFor=\"file\">Choose File</label>\n      {rows.length < 1 ? (\n        ''\n      ) :\n      (titlesForValidation.includes('full name')\n      && titlesForValidation.includes('email')\n      && titlesForValidation.includes('phone'))\n      ? (\n        <Table\n        titles={titles}\n        rows={rows}\n        />\n      ) : (<div className=\"error\">Wrong data</div>)\n      }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}